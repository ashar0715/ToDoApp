@page "/plans/addplan"
@inject PlansService planService
@inject IFileReaderService fileReaderService
@inject NavigationManager navigationManager
@attribute [Authorize]

<h3>Add a new plan</h3>

<div class="row">
    <EditForm Model="model" Style="width:100%">
        <RadzenCard>
            <AlertMessage Message="@message" MessageType="@messageType" />
            <DataAnnotationsValidator />
            <ValidationSummary />
            <RadzenTextBox Placeholder="Title" Style="margin:10px" />
            <RadzenTextArea Placeholder="Description" Style="margin:10px" />
            <input type="file" style="margin:10px" @ref="inputReference" @onchange="async () => await ChooseFileAsync()" />
            <img style="width:50%; margin:auto" src="@imageContent" />
            <hr />
            <RadzenButton Text="Insert" class="btn btn-block" ButtonStyle="Radzen.ButtonStyle.Success" Style="margin:auto; width:30%" />
        </RadzenCard>
    </EditForm>

</div>

@code {
    PlanRequest model = new PlanRequest();

    System.IO.Stream fileStream = null;
    string imageContent = string.Empty;
    string fileName = string.Empty;
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    ElementReference inputReference;


    async Task ChooseFileAsync()
    {
        var file = (await fileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();
        var fileInfo = await file.ReadFileInfoAsync();
        //to validate file extension
        string extension = System.IO.Path.GetExtension(fileInfo.Name);
        var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };

        if (!allowedExtensions.Contains(extension))
        {
            message = "The choosen file is invalid image file";
            messageType = Models.AlertMessageType.Error;
            return;
        }

        message = null;

        using (var memoryStream = await file.CreateMemoryStreamAsync())
        {
            fileStream = new System.IO.MemoryStream(memoryStream.ToArray());
            //Convert byte code of the image to the string representation
            imageContent = $"data:{fileInfo.Type};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
        }
    }
}
