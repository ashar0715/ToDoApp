@page "/plans/details/{id}"
@inject PlansService planService
@inject IFileReaderService fileReaderService
@inject NavigationManager navigationManager
@inject ToDoItemsService itemsService
@attribute [Authorize]

<h3>Edit plan "@model.Title"</h3>
<div class="row">
    <div class="col-6">
        <EditForm Model="model" OnValidSubmit="async() => await EditPlanAsync()">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />
                <DataAnnotationsValidator />
                <ValidationSummary />
                <RadzenTextBox Placeholder="Title" @bind-Value="@model.Title" Style="margin:10px" />
                <RadzenTextArea Placeholder="Description" @bind-Value="@model.Description" Style="margin:10px" />
                <input @onmousemove="@Mouse_Move" @onmouseout="@Mouse_Out" type="file" style="margin:10px;" @ref="inputReference" @onchange="async () => await ChooseFileAsync()" />
                <div style="visibility:@Visibility; margin:10px; font-size:small">
                    <i>.jpg, .png, .bmp</i>
                </div>
                <img style="width:100%; margin:auto" src="@imageContent" />
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Save" Disabled="isBusy" class="btn btn-block" ButtonStyle="Radzen.ButtonStyle.Success" Style="margin:auto; width:30%" />
            </RadzenCard>
        </EditForm>
    </div>

    <div class="col-6">
        <RadzenCard>
            <h2>Plan's Items</h2>
            <EditForm Model="itemModel" OnValidSubmit="async () => await SubmitItemFormAsync()">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <table>
                    <tr>
                        <td>
                            <Radzen.Blazor.RadzenButton Text="*" Disabled="isBusy" ButtonStyle="Radzen.ButtonStyle.Info" ButtonType="Radzen.ButtonType.Button"/>
                        </td>
                        <td>
                            <RadzenTextBox Placeholder="Item Description..." @bind-Value="itemModel.Description"/>
                        </td>
                        <td>
                            <Radzen.Blazor.RadzenButton Text="Submit" Disabled="isBusy" ButtonStyle="Radzen.ButtonStyle.Primary" ButtonType="Radzen.ButtonType.Submit"/>
                        </td>
                    </tr>
                    @foreach (var item in items)
                    {
                        string descriptionStyle = item.IsDone ? "text-decoration-line: line-through" : "text-decoration-line: none";
                        <tr>
                            <td>
                                <RadzenCheckBox @bind-Value="item.IsDone" @onclick="async () => await ChangeItemStatusAsync(item.Id)"/>
                            </td>
                            <td>
                                <span style="@descriptionStyle">@item.Description</span>
                            </td>
                            <td>
                                <RadzenButton Text="x" ButtonStyle="Radzen.ButtonStyle.Danger" Disabled="isBusy" ButtonType="Radzen.ButtonType.Button"/>
                            </td>
                        </tr>

                    }
                </table>

            </EditForm>
        </RadzenCard>
    </div>
</div>


    @code {
        [Parameter]
        public string Id { get; set; }
        [CascadingParameter]
        private Task<AuthenticationState> AuthenticationState { get; set; }

        public string Visibility { get; set; } = "hidden";

        PlanRequest model = new PlanRequest();
        bool isBusy = false;
        System.IO.Stream fileStream = null;
        string imageContent = string.Empty;
        string fileName = string.Empty;
        string message = string.Empty;
        Models.AlertMessageType messageType = Models.AlertMessageType.Success;

        ElementReference inputReference;

        protected void Mouse_Move(MouseEventArgs args)
        {
            Visibility = "visible";
        }

        protected void Mouse_Out(MouseEventArgs args)
        {
            Visibility = "hidden";
        }

        async Task ChooseFileAsync()
        {
            //first returns collection of files that have been selected by the user
            //than first file of the collection is taken
            var file = (await fileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();
            //returns info about image file, that ll be used to validate a file extension
            var fileInfo = await file.ReadFileInfoAsync();
            fileName = fileInfo.Name;
            //to validate file extension
            string extension = System.IO.Path.GetExtension(fileInfo.Name);
            var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };

            if (!allowedExtensions.Contains(extension))
            {
                message = "The choosen file is invalid image file";
                messageType = Models.AlertMessageType.Error;
                return;
            }

            message = null;

            using (var memoryStream = await file.CreateMemoryStreamAsync())
            {
                //copy the content to a new stream
                fileStream = new System.IO.MemoryStream(memoryStream.ToArray());
                //Convert byte code of the image to the string representation, bounded to img src
                imageContent = $"data:{fileInfo.Type};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
            }
        }

        async Task EditPlanAsync()
        {
            isBusy = true;

            model.CoverFile = fileStream;
            model.FileName = fileName;
            var result = await planService.PostPlanAsync(model);

            if (result.IsSuccess)
            {
                message = "Plan edited succesfully";
                messageType = Models.AlertMessageType.Success;
            }
            else
            {
                message = result.Message;
                messageType = Models.AlertMessageType.Error;
            }

            isBusy = false;
        }

        async Task GetPlanByIdAsync()
        {
            isBusy = true;
            var result = await planService.GetPlanByIdAsync(Id);

            if (result.IsSuccess)
            {
                model.Title = result.Record.Title;
                model.Description = result.Record.Description;
                imageContent = result.Record.CoverPath;
                model.Id = result.Record.Id;
                items = result.Record.ToDoItems.ToList();
            }
            else
            {
                message = result.Message;
                messageType = Models.AlertMessageType.Error;
            }
            isBusy = false;
        }

        protected async override Task OnInitializedAsync()
        {
            var userState = AuthenticationState.Result;
            var accessToken = userState.User.FindFirst("AccessToken").Value;
            planService.AccessToken = accessToken;
            itemsService.AccessToken = accessToken;
            await GetPlanByIdAsync();
        }
        #region ToDoItems
        List<ToDoItem> items = new List<ToDoItem>();
        ToDoItem selectedItem = null;
        ToDoItemRequest itemModel = new ToDoItemRequest();

        async Task InsertItemAsync()
        {
            isBusy = true;
            itemModel.PlanId = Id;
            var result = await itemsService.CreateItemAsync(itemModel);

            if (result.IsSuccess)
            {
                items.Add(result.Record);
            }
            else
            {
                //TODO: show an error alert
            }
            isBusy = false;
        }

        async Task SubmitItemFormAsync()
        {
            if (selectedItem == null)
            {
                await InsertItemAsync();
            }
            else
            {
                //Update
            }
        }

        async Task ChangeItemStatusAsync(string itemId)
        {
            isBusy = true;
            var result = await itemsService.ChangeItemStateAsync(itemId);

            if (!result.IsSuccess)
            {
                //show error alert message
            }
            isBusy = false;
        }

        #endregion

    }

