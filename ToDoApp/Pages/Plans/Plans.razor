@page "/plans"
@page "/plans/{pageNumber:int}"

@inject PlansService plansService
@inject NavigationManager navigationManager
@attribute [Authorize]

@if (string.IsNullOrWhiteSpace(Query))
{
    <h2>My Plans - Page: @PageNumber</h2>
}
else
{
    <h2>My Plans - Results for '@Query' - Page: @PageNumber</h2>
}


@if (isBusy)
{
    <h2>Loading...</h2>
}
else
{
    <div class="row">
        <RadzenTextBox Placeholder="Query" />
        <Radzen.Blazor.RadzenButton Text="Search" @bind-Value="Query" Click="async () => await GetPlansAsync()" />
    </div>
    <hr />

    <div class="row">
        @foreach (var plan in plans)
        {
            <div class="col-4">
                <RadzenCard Style="margin:10px">
                    <img src="@plan.CoverPath"  style="width:90%;margin:5px" />
                    <a href='/plans/details/@plan.Id'>@plan.Title</a>
                    <p>@plan.Description</p>
                    <hr />
                    <div class="row">
                        <div class="col-6">
                            <Radzen.Blazor.RadzenButton Text="Edit" Style="padding:0px" ButtonStyle="Radzen.ButtonStyle.Success"
                                                        Click='() => navigationManager.NavigateTo($"/plans/details/{plan.Id}")' class="btn-block" />
                        </div>
                        <div class="col-6">
                            <Radzen.Blazor.RadzenButton Text="Delete" Style="padding:0px" ButtonStyle="Radzen.ButtonStyle.Danger"
                                                         Click="() => DeletePlanAsync(plan.Id)" class="btn-block" />
                        </div>
                    </div>
                </RadzenCard>
            </div>
            <hr/>
            <ConfirmationPopUp ConfirmationChanged="ConfirmationChanged_EventHandler" @ref="DeleteConfirmation"></ConfirmationPopUp>
        }

    </div>
    <hr />
}

<div class="row">
    @for (int i = 1; i < totalPages; i++)
    {
        int page = i;
        @if (page == PageNumber)
        {
            <Radzen.Blazor.RadzenButton Click="async () => await MoveToPageAsync(page)" Disabled="true" ButtonStyle="Radzen.ButtonStyle.Info" Text="@i.ToString()" Style="margin:8px;" />
        }
        else
        {
            <Radzen.Blazor.RadzenButton Click="async () => await MoveToPageAsync(page)" ButtonStyle="Radzen.ButtonStyle.Info" Text="@i.ToString()" Style="margin:8px;" />
        }
    }
</div>


@code {

    public ConfirmationPopUp DeleteConfirmation { get; set; }

    [Parameter]
    public int? PageNumber { get; set; }

    [Parameter]
    public string Query { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    bool isBusy = false;
    List<Plan> plans = new List<Plan>();

    int totalPages = 1;

    string planToDeleteId = string.Empty;

    async Task GetPlansAsync()
    {
        isBusy = true;
        var userState = authenticationState.Result;
        plansService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        if (PageNumber == null) PageNumber = 1;
        PlanCollectionResponse result;
        if (string.IsNullOrWhiteSpace(Query))
        {
            result = await plansService.GetAllPlansByPageAsync(PageNumber.Value);
        }
        else
        {
            result = await plansService.SearchPlansByPageAsync(Query, PageNumber.Value);
        }

        if (result.Count % result.PageSize == 0)
        {

        }
        else
        {
            totalPages = result.Count / result.PageSize + 1;
        }

        plans = result.Records.ToList();
        isBusy = false;
    }

    async Task MoveToPageAsync(int pageNumber)
    {
        PageNumber = pageNumber;
        await GetPlansAsync();
    }

    string selectedPlanId = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await GetPlansAsync();
    }

    void SelectPlan(string id)
    {
        selectedPlanId = id;
    }

    void DeletePlanAsync(string id)
    {
        isBusy = true;

        planToDeleteId = id;
        DeleteConfirmation.Show();

        isBusy = false;
    }

    protected async Task ConfirmationChanged_EventHandler(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var result = await plansService.DeletePlanAsync(planToDeleteId);
            if (result.IsSuccess)
            {
                var deletedPlan = plans.SingleOrDefault(p => p.Id == planToDeleteId);
                plans.Remove(deletedPlan);
            }

            await GetPlansAsync();
        }
        else
        {
            await GetPlansAsync();
        }
    }
}