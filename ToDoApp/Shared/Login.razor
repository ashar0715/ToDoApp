@page "/auth/login"
@using ToDoApp.Shared.Models;
@layout AuthLayout
@inject AuthentificationService authService
@inject NavigationManager navigation
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider authenticationStateProvider

<div class="row">
    <div class="col-12">
        <h2>Welcome to ToDoApp!</h2>
        <h3>Login to your account</h3>

        <EditForm Model="loginRequest" OnValidSubmit="LoginUser">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType"></AlertMessage>

                <label>Email</label>
                <Radzen.Blazor.RadzenTextBox @bind-Value="loginRequest.Email"></Radzen.Blazor.RadzenTextBox>

                <label>Password</label>
                <Radzen.Blazor.RadzenPassword @bind-Value="loginRequest.Password"></Radzen.Blazor.RadzenPassword>

                <hr />

                <Radzen.Blazor.RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login"
                                            ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2" Disabled="isBusy" />

                <Radzen.Blazor.RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Register"
                                            ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2" Disabled="isBusy" Click="GoToRegister" />
            </RadzenCard>

        </EditForm>

    </div>

</div>

@code {
    LoginRequest loginRequest = new LoginRequest();

    bool isBusy = false;
    string message = string.Empty;
    ToDoApp.Models.AlertMessageType messageType = ToDoApp.Models.AlertMessageType.Success;

    Dictionary<string, string> userInfo = new Dictionary<string, string>();

    public async Task LoginUser()
    {
        isBusy = true;
        var result = await authService.LoginUserAsync(loginRequest);
        if (result.IsSuccess)
        {
            //This "userInfo" object will be stored locally in a browser
            var userInfo = new ToDoApp.Models.LocalUserInfo
            {
                AccessToken = result.Message,
                Email = result.UserInfo["Email"],
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier]
            };
            //when passed a key name and value, will add that key to the given Storage object
            await storageService.SetItemAsync("User", userInfo);
            await authenticationStateProvider.GetAuthenticationStateAsync();
            navigation.NavigateTo("/");
        }
        else
        {
            message = result.Message;
            messageType = ToDoApp.Models.AlertMessageType.Error;
        }
        isBusy = false;
    }

    void GoToRegister()
    {
        navigation.NavigateTo("auth/register");
    }
}


